// Copyright (c) 2024, NVIDIA CORPORATION.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Flatbuffer schema for the profiler

namespace spark_rapids_jni.profiler;

table ProfileHeader {
  magic:string;
  version:uint32;
  writer_version:string;
}

union ActivityRecord {
  DeviceActivity,
  DroppedRecords
}

enum ApiKind:byte {
  Driver = 0,
  Runtime = 1
}

table ApiActivity {
  kind:ApiKind = Runtime;
  cbid:uint32;
  start:uint64;
  end:uint64;
  process_id:uint32;
  thread_id:uint32;
  correlation_id:uint32;
  return_value:uint32;
}

table DeviceActivity {
  global_memory_bandwidth:uint64;
  global_memory_size:uint64;
  constant_memory_size:uint32;
  l2_cache_size:uint32;
  num_threads_per_warp:uint32;
  core_clock_rate:uint32;
  num_memcpy_engines:uint32;
  num_multiprocessors:uint32;
  max_ipc:uint32;
  max_warps_per_multiprocessor:uint32;
  max_blocks_per_multiprocessor:uint32;
  max_shared_memory_per_multiprocessor:uint32;
  max_registers_per_multiprocessor:uint32;
  max_registers_per_block:uint32;
  max_shared_memory_per_block:uint32;
  max_threads_per_block:uint32;
  max_block_dim_x:uint32;
  max_block_dim_y:uint32;
  max_block_dim_z:uint32;
  max_grid_dim_x:uint32;
  max_grid_dim_y:uint32;
  max_grid_dim_z:uint32;
  compute_capability_major:uint32;
  compute_capability_minor:uint32;
  id:uint32;
  ecc_enabled:uint32;
  name:string;
}

table DroppedRecords {
  num_dropped:uint64;
}

enum MarkerFlags:uint8 (bit_flags) {
  Instantaneous = 0,
  Start = 1,
  End = 2,
  SyncAcquire = 3,
  SyncAcquireSuccess = 4,
  SyncAcquireFailed = 5,
  SyncRelease = 6
}

enum ActivityObjectKind:uint8 {
  Unknown = 0,
  Process = 1,
  Thread = 2,
  Device = 3,
  Context = 4,
  Stream = 5
}

enum MetricValueKind:uint8 {
  Double = 0,
  Uint64 = 1,
  Percent = 2,
  Throughput = 3,
  Int64 = 4,
  UtilizationLevel = 5
}

table ActivityObjectId {
  process_id:uint32;  // present if object kind is Process or Thread
  thread_id:uint32;   // present if object kind is Thread
  device_id:uint32;   // present if object kind is Device or Context or Stream
  context_id:uint32;  // present if object kind is Context or Stream
  stream_id:uint32;   // present if object kind is Stream
}

table MarkerActivity {
  flags:MarkerFlags = Start;
  timestamp:uint64;
  id:int32;
  object_kind:ActivityObjectKind = Thread;
  object_id:ActivityObjectId;
  name:string;
  domain:string;
}

table MarkerData {
  flags:MarkerFlags = Start;
  id:int32;
  //payload_kind:MetricValueKind;
  //payload:MetricValue;
  color:uint32;
  category:uint32;
}
